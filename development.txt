Remove the Map()


Take the distance from the current camera distance.







Start with writing annotations for the users' track.
Annotations should be as cheap as possible for writing, no fancy stuff, for better performance.

See how to write a number of dots to indicate the walked track. That is, how to add basic annotations live. Likely have a container with annotatons, and update that container, so the Stete will write them onto the map. Or something like this.
Display an updating path of a user's location history.
https://developer.apple.com/documentation/mapkit/displaying-an-updating-path-of-a-user-s-location-history

While drawing the track,
intelligently decide whether to replace the last drawn annotation with the current annotation.
This reduces the number of dots drawn.
And improves, likely, the performance.










The Map() may be slow if there's many annotations due to redrawing them.
Better use MKMapView for performance.
https://medium.com/@nevinchanyi/mkmapview-in-swiftui-complete-guide-115c4602af8a

https://developer.apple.com/documentation/mapkit/mkmapview








See if animating the map helps, make a setting for that too, as it may use more energy.
Button for whether the maps follows the user.
This button is that setting too.


Mapkit overlays.
https://developer.apple.com/documentation/mapkit/mapkit-overlays



https://developer.apple.com/documentation/corelocation/handling-location-updates-in-the-background







Once areas get covered, there's more and more annotations to draw.
Will that affect performance?
Mitigating measures:
* Draw the covered areas only in the visible area.
* Make a menu to call a procedure to join areas into one to reduce the number of areas.
* If drawing a new covered area, and it entirely overlays existing areas, then those existing areas will be removed and effectually replaced by the larger area. This may significantly reduce the areas if used wisely.







Have app background permissions, it won't draw on the map, it will just record the track, and draw the remainder on the map once it moves to the foreground.


Currently if the app moves to the foreground, it gives a red indication for the location. Switching tracking off and on again fixes that. Think of a better fix.



Use the location manager's magnetometer data.
https://github.com/mryssng/MagnetometerDemo
This info can be used to correct for the map rotation so it rotates if if the person does not move.



Check on whether make locationManager.desiredAccuracy settable via menu.

