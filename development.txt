


Upon startup, read the database and draw the track.







Remove all old WrapperView code and move to the new MapView step by step.

It no longer draws the Naples zones, but keeps the code, and removes the JSON stuff.















Menu: Mark area as ready
Get user location.
Create octagon around it.
Draw it on the map and fill it.
https://stackoverflow.com/questions/67838540/how-to-draw-a-polygon-using-apple-map-by-mkpolygon
Check if it works on a rotated map too. No it doesn't.


Use octagons.
Draw a fixed polygon on the map and cover the area.
Export the Android polygons.
Import the Android polygon database.
Draw all areas covered on the map.
Check performance.

Change toolbar to cancel or approve the polygon.
At the moment of drawing the polygon, don't let the map move, switch that of for that moment.


Make octagon editable:
https://medium.com/@leocoronag/interactive-polygon-zones-in-mapkit-customizing-your-map-views-to-an-obsessive-extent-77943267ed10









In the background, it only stores the waypoints in the database, and does not draw them on the map.


On moving to the foreground, it draw the waypoints on the map.
Distinguish them from the already drawn ones, perhaps by keeping locations in memory not yet drawn, and then only draw the not yet drawn ones.


Use a PRAGMA to make insertions very cheap and fast.






If it keeps losing the user location symbol on the map, then do one of these:
- [x] Write the annotation on the main thread
- [ ] Write our own symbol for the user location

















Have a way to designate an area covered.
The area can be edited.
Have OK and cancel, perhaps in the menu or the toolbar?
Stored that area in the database.
Export that database.
Import that database.
If a larger area is marked, all containing areas are wiped and replaced with the larger one.

















Make a label "About" and update it with diagnostics info, e.g. how many location updates were received, when the app goes to the foreground. Make sure to switch it off again.

Then update location delegate so on background it stores then locations in array only, or say, only count the number.
Then take the app along on a journey.
Then on move to foreground, update the "About" label with the location count.
If ok, then start drawing stuff on move to foreground.
That will check the entire route.

https://developer.apple.com/documentation/corelocation/handling-location-updates-in-the-background

https://stackoverflow.com/questions/52199463/ios-swift-background-location-monitoring

https://medium.com/simform-engineering/streamlined-location-updates-with-cllocationupdate-in-swift-wwdc23-2200ef71f845

While in the background, it receives the location updates,
stores the locations, but does not draw them on the map.
It will draw the cached locations on the map when it goes to the foreground.

It stores the track in the app settings, perhaps a database. This persists them.
If the app starts, and the track has not yet been drawn, it draw the track from the database.
This is more robust for crashes too.

If tracking and following are off, then make things very efficient in the background so it uses hardly any power.

In the background, it never follows the user that is, it does not move the map camera.











Mapkit overlays.
https://developer.apple.com/documentation/mapkit/mapkit-overlays








Once areas get covered, there's more and more annotations to draw.
Will that affect performance?
Mitigating measures:
* Draw the covered areas only in the visible area.
* Make a menu to call a procedure to join areas into one to reduce the number of areas.
* If drawing a new covered area, and it entirely overlays existing areas, then those existing areas will be removed and effectually replaced by the larger area. This may significantly reduce the areas if used wisely.





Have app background permissions, it won't draw on the map, it will just record the track, and draw the remainder on the map once it moves to the foreground.




Currently if the app moves to the foreground, it gives a red indication for the location. Switching tracking off and on again fixes that. Think of a better fix.
Perhaps it should once a minute or so, in the foreground, check the location and ensure it works.





Check on whether make locationManager.desiredAccuracy settable via menu.




The buttons and menus, should they be visible on the map itself?




Have four tracking states, one extra not displaying user location at all?




Have a button "Park (vehicle)" and implement it.



Tapping items in the menu is hard, there's only a small area that is tappable.


For receiving background location updates, does it need "Always location" permissions. Somewhere it says it does not need those if the background service is properly done.



Disable the developer journal production eventually?
