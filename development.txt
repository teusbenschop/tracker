Repeatedly enable moving the map in the app.
Reason: It stops moving the map on its own.
First do it slow so it can be seen in the app.
Then do it faster once it works.





Repeatedly enable drawing user location circle in the app.
Reason: It switches off on its own.
First do it slow so it can be seen in the app.
Check whether it works.
Then do it faster once it works.
Also test whether setting it to true repeatedly has the same effect, so never setting it off.





Check example SQLite usage tutorial.

https://medium.com/@emre.deniz/ios-swift-sqlite3-integration-1b3dece47b46


Let the track be drawn on the map, yes, but also be stored in the database.
On startup it reads the track from that database, and draws it on the map.
On clearing the track it clears the map and the database.












Have a way to designate an area covered.
The area can be edited.
Have OK and cancel, perhaps in the menu or the toolbar?
Stored that area in the database.
Export that database.
Import that database.
If a larger area is marked, all containing areas are wiped and replaced with the larger one.

















Make a label "About" and update it with diagnostics info, e.g. how many location updates were received, when the app goes to the foreground. Make sure to switch it off again.

Then update location delegate so on background it stores then locations in array only, or say, only count the number.
Then take the app along on a journey.
Then on move to foreground, update the "About" label with the location count.
If ok, then start drawing stuff on move to foreground.
That will check the entire route.

https://developer.apple.com/documentation/corelocation/handling-location-updates-in-the-background

https://stackoverflow.com/questions/52199463/ios-swift-background-location-monitoring

https://medium.com/simform-engineering/streamlined-location-updates-with-cllocationupdate-in-swift-wwdc23-2200ef71f845

While in the background, it receives the location updates,
stores the locations, but does not draw them on the map.
It will draw the cached locations on the map when it goes to the foreground.

It stores the track in the app settings, perhaps a database. This persists them.
If the app starts, and the track has not yet been drawn, it draw the track from the database.
This is more robust for crashes too.

If tracking and following are off, then make things very efficient in the background so it uses hardly any power.

In the background, it never follows the user that is, it does not move the map camera.











Mapkit overlays.
https://developer.apple.com/documentation/mapkit/mapkit-overlays








Once areas get covered, there's more and more annotations to draw.
Will that affect performance?
Mitigating measures:
* Draw the covered areas only in the visible area.
* Make a menu to call a procedure to join areas into one to reduce the number of areas.
* If drawing a new covered area, and it entirely overlays existing areas, then those existing areas will be removed and effectually replaced by the larger area. This may significantly reduce the areas if used wisely.





Have app background permissions, it won't draw on the map, it will just record the track, and draw the remainder on the map once it moves to the foreground.




Currently if the app moves to the foreground, it gives a red indication for the location. Switching tracking off and on again fixes that. Think of a better fix.
Perhaps it should once a minute or so, in the foreground, check the location and ensure it works.





Check on whether make locationManager.desiredAccuracy settable via menu.




The buttons and menus, should they be visible on the map itself?




Have four tracking states, one extra not displaying user location at all?




